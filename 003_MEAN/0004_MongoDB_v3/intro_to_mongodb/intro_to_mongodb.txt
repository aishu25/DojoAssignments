// Intro to MongoDB
// For This section, we want you to do the following operations in a MongoDB database.
// Work with a partner or a small group so everyone gets a chance to collaborate and work as a team.
// For some of these, you may have to refer to MongoDB's operator documentation.
// This is one of the most important assignments in this section, make sure you answer all questions
// and take notes for future assignments.

// Create a database called 'my_first_db'.
use my_first_db

// Create students collection.
db.createCollection("students")

// Each document you insert into this collection should have the following format:
//  ({name: STRING,home_state: STRING,lucky_number: NUMBER,birthday: {month: NUMBER,day: NUMBER,year: NUMBER}})
db.students.insert({ name: "DinDin", home_state: "CA", lucky_number: 4, birthday: { month: 4, day: 4, year: 1444 }})

// Create 5 students with the appropriate info.
db.students.insert({ name: "Milton", home_state: "NY", lucky_number: 7, birthday: { month: 8, day: 1, year: 1967 }})
db.students.insert({ name: "Smith", home_state: "MA", lucky_number: 1, birthday: { month: 1, day: 1, year: 1111 }})
db.students.insert({ name: "HoHo", home_state: "PA", lucky_number: 2, birthday: { month: 2, day: 2, year: 1970 }})
db.students.insert({ name: "Anne", home_state: "OH", lucky_number: 9, birthday: { month: 6, day: 5, year: 2004 }})
db.students.insert({ name: "JJ", home_state: "WA", lucky_number: 4, birthday: { month: 5, day: 6, year: 1568 }})

// Get all students.
db.students.find().pretty()

// Retrieve all students who are from California (San Jose Dojo) or Washington (Seattle Dojo).
db.students.find({ $or: [{home_state: "CA"}, {home_state: "WA"}]}).pretty()

// Get all students whose lucky number is:
// greater than 3
db.students.find({ lucky_number: { $gt: 3 } }).pretty()

// less than or equal to 10
db.students.find({ lucky_number: { $lte : 10 } }).pretty()

// between 1 and 9 (inclusive)
db.students.find({$and : [{lucky_number : { $gte : 1 }},{lucky_number : { $lte : 9 }}]}).pretty()

// Add a field to each student collection called 'interests' that is an ARRAY.
// It should contain the following entries: 'coding', 'brunch', 'MongoDB'.
// Do this in ONE operation.
db.students.update({}, { $set : {interests : ["coding", "brunch", "MongoDB"]} }, { multi : true })

// Add some unique interests for each particular student into each of their interest arrays.
db.students.update({ name : "DinDin" }, { $push : { interests : "cycling" } })
db.students.update({ name : "Milton" }, { $push : { interests : "gambling" } })
db.students.update({ name : "Smith" }, { $push : { interests : "game" } })
db.students.update({ name : "HoHo" }, { $push : { interests : "reading" } })
db.students.update({ name : "Anne" }, { $push : { interests : "driving" } })
db.students.update({ name : "JJ" }, { $push : { interests : "eathing" } })

// Add the interest 'taxes' into someone's interest array.
db.students.update({ name: "Milton" }, { $push : { interests : "taxes" } })

// Remove the 'taxes' interest you just added.
db.students.update({ name: "Milton" }, { $pull : { interests : "taxes" } })

// Remove all students who are from California (or Washington).
db.students.remove({ $or : [{ home_state : "CA" }, { home_state: "WA" }] })

// Remove a student by name. 
db.students.remove({ name: "Smith" })

// Remove a student whose lucky number is greater than 5 (JUST ONE)
db.students.remove( { lucky_number: { $gt : 5 } }, true )

// Add a field to each student collection called 'number_of_belts' and set it to 0.
db.students.update( {}, { $set : { number_of_belts : 0 } }, { multi : true } )

// Increment this field by 1 for all students in Washington (Seattle Dojo).
db.students.update({ home_state: "WA" }, { $inc : { number_of_belts : 1 } })

// Rename the 'number_of_belts' field to 'belts_earned'
db.students.update( {}, { $rename : { "number_of_belts" : "belts_earned" } }, { multi : true } )

// Remove the 'lucky_number' field.
db.students.update({}, { $unset : { lucky_number : "" } }, { multi : true })

// Add a 'updated_on' field, and set the value as the current date.
db.students.update({}, { $currentDate : { updated_on : { $type : "date" } } }, { multi : true })
